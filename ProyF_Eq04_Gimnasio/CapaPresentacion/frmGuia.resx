<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Label2.Text" xml:space="preserve">
    <value>
Navegar por los formularios:
Para pasar de un formulario a otro, hemos implementado el uso de un menú superior llamado MenuStrip.
 Esta barra se encuentra en la parte superior de la aplicación y despliega una lista de opciones que incluyen 
"Empleados", "Clientes", "Registro de Cliente", "Invitados", "Presentación" y "Salir".

Registro de Clientes:
El registro de clientes te permite ingresar la información personal de cada cliente. Completa los campos requeridos, 
como cédula, nombre, apellido, fecha de nacimiento, etc., asegurándote de proporcionar los datos en el formato 
indicado. Además, selecciona la sucursal y membresía correspondiente para cada cliente. Haz clic en el botón "Siguiente"
 para dirigirte al registro de las condiciones de cada cliente.

Listado de Empleados:
En esta sección, encontrarás un listado completo de todos los empleados que trabajan en la empresa a nivel nacional. 
Puedes utilizar las opciones de filtrado y búsqueda para localizar empleados  específicos. Simplemente selecciona una 
columna del combobox y escribe el dato que deseas filtrar en esa columna. Además, se ha incluido un botón llamado
 "Actualizar datos", que te dirigirá a un formulario donde podrás cambiar información específica de un empleado, como
 el salario y la sucursal. También encontrarás el botón "Refrescar tabla", que te permitirá actualizar la tabla y mostrar 
los datos que se han modificado recientemente. Si deseas ver tablas adicionales, como las sucursales, las condiciones 
o las posiciones, puedes hacerlo haciendo clic en el botón "Visualizar tablas".

Listado de Clientes:
En esta sección, encontrarás un listado completo de todos los clientes registrados en la aplicación. Al igual que en el 
listado de empleados, puedes utilizar las opciones de filtrado y búsqueda para localizar clientes específicos. Utiliza 
el combobox para seleccionar una columna y luego ingresa el dato que deseas filtrar en esa columna. También se ha 
incluido un botón llamado "Actualizar clientes activos", que te permitirá eliminar los clientes cuya membresía ha expirado. 
Esto se basa en la fecha de registro del cliente, y si ha pasado más de un mes desde esa fecha, se considera que la membresía ha expirado. 
Además, encontrarás el botón "Refrescar tabla" para actualizar y mostrar los datos agregados recientemente. Al igual que en la sección de 
empleados, puedes ver tablas adicionales utilizando el botón "Visualizar tablas".

Registro de Condiciones:
El registro de condiciones te permite ingresar información adicional sobre las condiciones o padecimientos de un cliente. Para hacerlo, 
simplemente selecciona la fila correspondiente al padecimiento, como alergias o enfermedades preexistentes. Luego de seleccionar la 
fila, haz clic en el botón "Guardar" para confirmar el registro de las condiciones del cliente. Una vez guardadas las condiciones, puedes 
hacer clic en el botón "Listo" para finalizar el registro. Si el cliente no tiene ningún padecimiento, simplemente haz clic en el botón "Listo" 
para finalizar el registro.

Registro de Invitados:
En esta sección, puedes registrar invitados de un cliente. Completa los campos requeridos, como nombre, apellido y fecha de visita, asegurándote 
de ingresar los datos correctamente. Haz clic en el botón "Guardar" para confirmar el registro del invitado. Es importante tener en cuenta que cada 
cliente tiene un límite de 4 invitados por mes. Si ya se han utilizado todas las invitaciones del mes, no se permitirá registrar un nuevo invitado hasta el 
siguiente mes.

Cierre de Sesión:
Cuando hayas terminado de utilizar la aplicación, asegúrate de cerrar sesión para proteger la privacidad de tus datos. Haz clic en el botón "Salir" para
finalizar la ejecución del programa administrativo de manera segura.
</value>
  </data>
</root>